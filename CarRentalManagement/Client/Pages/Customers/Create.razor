@page  "/Customers/create/"
@inject HttpClient _client
@inject NavigationManager _navManager
<h3 class="card-title">Create New Customers</h3>
<hr />
<br />

<EditForm Model="@Customer" OnValidSubmit="CreateCustomer">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-group">
        <label>First Name: </label>
        <div>
            <InputText @bind-Value="Customer.FirstName" class="form-control" />
            <ValidationMessage For="@(() => Customer.FirstName)" />
        </div>
    </div>

    <div class="form-group">
        <label>Last Name: </label>
        <div>
            <InputText @bind-Value="Customer.LastName" class="form-control" />
            <ValidationMessage For="@(() => Customer.LastName)" />
        </div>
    </div>
    <div class="form-group">
        <label>Driving License: </label>
        <div>
            <InputText @bind-Value="Customer.DrivingLicense" class="form-control" />
            <ValidationMessage For="@(() => Customer.DrivingLicense)" />
        </div>
    </div>
    <div class="form-group">
        <label>Address: </label>
        <div>
            <InputText @bind-Value="Customer.Address" class="form-control" />
            <ValidationMessage For="@(() => Customer.Address)" />
        </div>
    </div>
    <div class="form-group">
        <label>Contact Number: </label>
        <div>
            <InputNumber @bind-Value="Customer.ContactNumber" class="form-control" />
            <ValidationMessage For="@(() => Customer.ContactNumber)" />
        </div>
    </div>
    <div class="form-group">
        <label>Email Address: </label>
        <div>
            <InputText @bind-Value="Customer.EmailAddress" class="form-control" />
            <ValidationMessage For="@(() => Customer.EmailAddress)" />
        </div>
    </div>
    <button type="submit" class="btn btn-success btn-block">
        Create Customer
    </button>
</EditForm>

@code {
    Customer Customer = new Customer();

    private IList<Make> Makes;
    private IList<Model> Models;
    private IList<Colour> Colours;
    private IList<Customer> Customers;

    protected async override Task OnInitializedAsync()
    {
        Makes = await _client.GetFromJsonAsync<List<Make>>($"{Endpoints.MakesEndpoint}");
        Models = await _client.GetFromJsonAsync<List<Model>>($"{Endpoints.ModelsEndpoint}");
        Colours = await _client.GetFromJsonAsync<List<Colour>>($"{Endpoints.ColoursEndpoint}");
        Customers = await _client.GetFromJsonAsync<List<Customer>>($"{Endpoints.CustomersEndpoint}");
    }
    private async Task CreateCustomer()
    {
        await _client.PostAsJsonAsync(Endpoints.CustomersEndpoint, Customer);
        _navManager.NavigateTo("/Customers/");
    }
}
